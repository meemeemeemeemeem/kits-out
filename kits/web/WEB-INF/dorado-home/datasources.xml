<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <!--SQL输出-->
    <bean id="showSQL" class="com.kits.log.SQLFilter"/>

    <!--数据源事务代理-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="druidDataSource"/>
    </bean>

    <tx:annotation-driven proxy-target-class="true"
                          transaction-manager="bdf2.jdbcTransactionManager"/>
    <!-- 修改数据源的时候,一定不要忘记修改sessionFactory中hibernate.dialect -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="filters" value="stat,wall"/>
        <property name="proxyFilters">
            <list>
                <ref bean="showSQL"/>
            </list>
        </property>

        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <property name="logAbandoned" value="${jdbc.logAbandoned}"/>
    </bean>

    <bean id="bdf2.jdbcTransactionManager"
          class="com.bstek.bdf2.core.orm.transaction.JdbcTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean parent="bdf2.dataSourceRegister">
        <property name="dataSource" ref="dataSource"/>
        <property name="name" value="defaultSource"/>
        <property name="asDefault" value="true"/>
    </bean>
    <bean id="sessionFactory" parent="bdf2.sessionFactory">
        <property name="dataSourceName" value="defaultSource"/>
        <property name="entityInterceptor" ref="bdf2.unByteCodeProxyInterceptor"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">com.kits.orm.dialect.hibernate.PostgreSQLDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <!--hibernate使用的模式-->
                <prop key="hibernate.default_schema">${db.schema}</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
            </props>
        </property>
        <!--        <property name="useTransactionAwareDataSource" value="true"/>-->
    </bean>

    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <!--JPA事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--实体管理器-->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描实体类 -->
        <property name="packagesToScan" value="com.kits"/>
        <!-- JPA供应商适配：数据库和方言 -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!-- 数据库类型配置 -->
                <property name="prepareConnection" value="false"/>
                <!-- 是否自动生成DDL建表 -->
                <property name="generateDdl" value="false"/>
                <!-- 配置dialect方言 -->
                <property name="databasePlatform"
                          value="com.kits.orm.dialect.hibernate.PostgreSQLDialect"/>
                <!-- 打印sql -->
                <property name="showSql" value="false"/>
            </bean>
        </property>
        <!-- 配置hibernate的其他属性 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
    </bean>
    <jpa:repositories base-package="com.kits"/>

    <!--    <bean id="redisHttpSessionConfiguration"-->
    <!--          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">-->
    <!--        <property name="maxInactiveIntervalInSeconds" value="18000"/>-->
    <!--        <property name="cookieSerializer" ref="defaultCookieSerializer"/>-->
    <!--    </bean>-->

    <!--    &lt;!&ndash; 设置Cookie domain 和 名称 &ndash;&gt;-->
    <!--    <bean id="defaultCookieSerializer" class="org.springframework.session.web.http.DefaultCookieSerializer">-->
    <!--        &lt;!&ndash; <property name="domainName" value="${session.domain}"/> &ndash;&gt;-->
    <!--        <property name="cookieName" value="JSESSIONID"/>-->
    <!--        <property name="cookiePath" value="/"/>-->
    <!--        &lt;!&ndash; <property name="domainNamePattern" value="^.+?\.(\w+\.[a-z]+)$"></property> &ndash;&gt;-->
    <!--    </bean>-->

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="3000"/> <!-- 最大能够保持idel状态的对象数 -->
        <property name="maxTotal" value="60000"/> <!-- 最大分配的对象数 -->
        <property name="testOnBorrow" value="true"/> <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
        <property name="maxWaitMillis" value="3000"/><!-- 超时控制 -->
    </bean>

    <!-- jedis集群部署 -->
    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"
          destroy-method="destroy">
        <constructor-arg ref="jedisPoolConfig"/>
        <constructor-arg>
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="192.168.3.41"/>
                    <constructor-arg index="1" value="6379"/>
                    <!--<property name="password" value="JMDSEC05"/>-->
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!--<bean name="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">-->
    <!--<constructor-arg>-->
    <!--<list>-->
    <!--<value>127.0.0.1:6379</value>-->
    <!--</list>-->
    <!--</constructor-arg>-->
    <!--<property name="maxRedirects" value="5" />-->
    <!--</bean>-->

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!--<constructor-arg name="clusterConfig" ref="redisClusterConfig"/>-->
        <property name="timeout" value="1000"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <property name="usePool" value="true"/>
        <property name="hostName" value="192.168.3.41"/>
        <property name="port" value="6379"/>
        <!--<property name="password" value="JMDSEC05"/>-->
        <!--<property name="database" value="0"/>-->
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"/>
    </bean>
</beans>
